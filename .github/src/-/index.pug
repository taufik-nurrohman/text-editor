extends _index.pug

block state
  - const title = 'Text Editor ' + version
  - const theme = '#000'
  - const scripts = ['index.min.js']

block script
  script
    | const editor = new TE(document.querySelector('textarea'));

block style
  style
    | * {
    |   box-sizing: border-box;
    | }
    | :root {
    |   background: #fff;
    |   color: #000;
    |   border-top: 4px solid;
    |   font: normal normal 16px/1.25 serif;
    | }
    | a {
    |   color: #009;
    |   text-decoration: none;
    | }
    | a, code {
    |   word-wrap: break-word;
    | }
    | code {
    |   font-family: monospace;
    |   font-size: 80%;
    | }
    | footer, header, main, nav {
    |   max-width: 700px;
    |   margin: 0 auto;
    | }
    | hr {
    |   border: 0;
    |   color: inherit;
    |   border-top: 1px dashed;
    |   height: 0;
    | }
    | pre {
    |   white-space: pre-wrap;
    |   word-wrap: break-word;
    | }
    | pre code {
    |   display: block;
    |   background: #eee;
    |   padding: 1em;
    | }
    | table {
    |   width: 100%;
    | }
    | td, th {
    |   text-align: left;
    |   vertical-align: top;
    | }
    | body > p:first-child {
    |   background: #ffa;
    |   border: 1px dashed;
    |   margin-top: 0;
    |   padding: .75em 1em;
    | }

block content
  p Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    h1= title
    p Text Editor is a simple JavaScript application that aims to provide accessibility improvements to the native HTML #[code &lt;textarea&gt;] elements so that users can control and manipulate their data in the text editor as they wish.
    hr
  main
    p It contains very sufficient methods to manipulate the existing text selection range data without providing unnecessary features. This ensures the file size remains small and keeps the scope of learning curve to be narrow, so that you can focus on the results.
    p
      textarea(spellcheck='false' style={
        'display': 'block',
        'width': '100%',
        'height': '6em',
        'box-sizing': 'border-box'
      }) Lorem ipsum dolor sit amet.
    p
      button(onclick='editor.wrap(\'<b>\', \'</b>\');'): b B
      = ' '
      button(onclick='editor.wrap(\'<i>\', \'</i>\');'): i I
      = ' '
      button(onclick='editor.insert(\'😀\', -1, true);') &#x263A;
    h2 Features
    ul
      li Light-weight, no dependencies. It uses vanilla JavaScript.
      li Simple #[abbr(title='Application Programming Interface') API]. Easy to master.
      li No hack and no feature detection. Optimized for modern browsers with their built-in JavaScript features.
      li Make your own. The core functionality is enough to help you making your own text editor.
    h2 Usage
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;&lt;textarea&gt;&lt;/textarea&gt;&lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |     const editor = new TE(document.querySelector('textarea'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const TE = require('@taufik-nurrohman/text-editor');
      |
      | const editor = new TE(document.querySelector('textarea'));
    h4 ECMAScript
    pre: code
      | import TE from '@taufik-nurrohman/text-editor';
      |
      | const editor = new TE(document.querySelector('textarea'));
    h2 Examples
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/self.html' target='_blank') Multiple Instances
      li: a(href='test/disabled.html' target='_blank') Disabled Text Area
      li: a(href='test/readonly.html' target='_blank') Read-Only Text Area
      li: a(href='test/get,let,set.html' target='_blank') Set, Get and Let Value
      li: a(href='test/$.html' target='_blank') Get Selection Data
      li: a(href='test/blur,focus.html' target='_blank') Focus, Blur Events
      li: a(href='test/select.html' target='_blank') Set Selection Range
      li: a(href='test/match.html' target='_blank') Match Selection
      li: a(href='tweak/alter.html' target='_blank') Alter Selection
      li: a(href='tweak/alter.prompt.html' target='_blank') Alter Selection with Prompt Value
      li: a(href='tweak/toggle.html' target='_blank') Toggle Replace Selection
      li: a(href='test/replace.html' target='_blank') Replace Selection
      li: a(href='test/insert.html' target='_blank') Insert Selection
      li: a(href='test/peel,wrap.html' target='_blank') Wrap, Peel Selection
      li: a(href='test/pull,push.html' target='_blank') Indent, Outdent Selection
      li: a(href='tweak/pull,push.type.html' target='_blank') Indent, Outdent by Custom Character
      li: a(href='tweak/pull,push.key.html' target='_blank') Indent, Outdent with Keyboard Key
      li: a(href='tweak/replace,search.html' target='_blank') Search/Replace Functionality
      li: a(href='test/trim.html' target='_blank') Trim Selection
      li: a(href='test/self.input.html' target='_blank') Using #[code &lt;input&gt;] Instead of #[code &lt;textarea&gt;]
      li #[a(href='index/rect.html' target='_blank') Get Selection Offset] (#[a(href='index/rect.min.js' target='_blank') +rect.min.js])
      li: a(href='index/rect.caret.html' target='_blank') Custom Caret Example
      li #[a(href='index/history.html' target='_blank') Undo and Redo Feature] (#[a(href='index/history.min.js' target='_blank') +history.min.js])
      li #[a(href='index/hook.html' target='_blank') Hooks Feature] (#[a(href='index/hook.min.js' target='_blank') +hook.min.js])
      li #[a(href='index/source.html' target='_blank') Source Code Editor] (#[a(href='index/source.min.js' target='_blank') +source.min.js])
    h2 Settings
    table(border='1')
      thead
        tr
          th Name
          th Description
      tbody
        tr
          td: code self
          td The text area element.
        tr
          td: code tab
          td The default indent character for #[code editor.pull()] and #[code editor.push()] method.
        tr
          td: code state
          td The configuration data.
        tr
          td: code state.tab
          td The default indent character for #[code editor.pull()] and #[code editor.push()] method.
    pre: code const editor = new TE(#[var self], #[var tab] = '\t');
    pre: code
      | const editor = new TE(#[var self], #[var state] = {
      |     tab: '\t'
      | });
    h2 Methods and Properties
    h3 TE.esc(string)
    p Escape regular expression&rsquo;s special characters.
    h3 TE.instances
    p Return the application instances.
    pre: code
      | for (let key in TE.instances) {
      |     console.log(key);
      |     console.log(TE.instances[key]);
      | }
    h3 TE.state
    p This property stores the initial values of #[code editor.state].
    pre: code
      | const editor = new TE({
      |     foo: ['bar', 'baz', 'qux']
      | });
      |
      | console.log([TE.state, editor.state]);
    h3 TE.version
    p Return the application version.
    pre: code
      | let version = TE.version,
      |     major = version.split('.')[0];
      |
      | if (+major &lt; 3) { &hellip; }
    h3 TE.x
    p List of regular expression characters to be escaped.
    h3 editor.blur()
    p Blur from the #[code &lt;textarea&gt;] element.
    h3 editor.focus(mode = 0)
    p Focus to the #[code &lt;textarea&gt;] element.
    pre: code
      | editor.focus(); // Focus to the last selection
      | editor.focus(-1); // Focus to the start of text area value
      | editor.focus(1); // Focus to the end of text area value
      | editor.focus(true); // Select all
    h3 editor.get()
    p Get current value of the #[code &lt;textarea&gt;] element if not empty, otherwise, return #[code null].
    h3 editor.insert(string, mode = 0, clear = false)
    p Insert #[var string] to (replace) the current selection.
    pre: code
      | editor.insert(':)'); // Insert at selection (replace selection)
      | editor.insert('&lt;b&gt;', -1); // Insert before selection
      | editor.insert('&lt;/b&gt;', 1); // Insert after selection
      | editor.insert(':)', -1, true); // Insert before selection and delete selection
      | editor.insert(':)', 1, true); // Insert after selection and delete selection
    h3 editor.let()
    p Reset value to the initial value of the #[code &lt;textarea&gt;] element.
    h3 editor.match(pattern, then)
    p Match current selection with the pattern provided.
    pre: code
      | if (editor.match(/^\s*:\w+:\s*$/)) {
      |     alert('Selection is detected as emoji!'); // &rarr; #[a(href='test/match.html' target='_blank') demo]
      | }
    p Do something with the current matched selection.
    pre: code
      | let maps = {
      |     ':happy:': '😀',
      |     ':sad:': '😩',
      |     ':wonder:': '😕'
      | };
      |
      | editor.match(/^\s*:\w+:\s*$/, function(m) {
      |     let exists = maps[m[0] = m[0] ? m[0].trim() : ""];
      |     exists &amp;&amp; this.insert(exists); // &rarr; #[a(href='test/alter.html' target='_blank') demo]
      | });
    p Match to the characters before selection, current selection and characters after selection.
    pre: code
      | let test = editor.match([/:$/, /^\w+$/, /^:/]);
      | console.log(test[0] &amp;&amp; test[1] &amp;&amp; test[2]);
    pre: code
      | editor.match([/:$/, /^\w+$/, /^:/], function(before, value, after) {
      |     console.log([before, value, after]); // &rarr; #[a(href='test/toggle.html' target='_blank') demo]
      | });
    h3 editor.peel(open, close, wrap = false)
    p Unwrap current selection from #[var open] and #[var close].
    pre: code
      | editor.peel('&lt;', '&gt;'); // Remove `&lt;` before selection and `&gt;` after selection
      | editor.peel('&lt;', '&gt;', true); // Remove `&lt;` at selection start and `&gt;` at selection end
      | editor.peel(/&lt;+/, /&gt;+/); // Remove any `&lt;` before selection and any `&gt;` after selection
      | editor.peel(/&lt;+/, /&gt;+/, true); // Remove any `&lt;` at selection start and any `&gt;` at selection end
    h3 editor.pull(by = editor.state.tab, includeEmptyLines = true)
    p Outdent current selection from #[var by].
    pre: code
      | editor.pull(); // Outdent from `\t`
      | editor.pull('****'); // Outdent from `****`
      | editor.pull(/[\t ]+/); // Outdent from any length of white-space
    h3 editor.push(by = editor.state.tab, includeEmptyLines = false)
    p Indent current selection with #[var by].
    pre: code
      | editor.push(); // Indent with `\t`
      | editor.push('****'); // Indent with `****`
    h3 editor.replace(from, to, mode = 0)
    p Replace current, before or after selection from #[var from] to #[var to].
    pre: code
      | editor.replace(/&lt;.*?&gt;/g, ""); // Strip HTML tag(s) in selection
      | editor.replace(/&lt;.*?&gt;/g, "", -1); // Strip HTML tag(s) before selection
      | editor.replace(/&lt;.*?&gt;/g, "", 1); // Strip HTML tag(s) after selection
    h3 editor.select(...lot)
    p Set selection range.
    pre: code
      | editor.select(); // Is the same as `editor.focus()`
      | editor.select(2); // Move caret to the index `2`
      | editor.select(0, 2); // Select from range `0` to `2`
      | editor.select(true); // Select all
    h3 editor.self
    p Return the #[code &lt;textarea&gt;] element.
    pre: code
      | editor.self.addEventListener('keydown', e =&gt; {
      |     if (
      |         (e.key &amp;&amp; 'Enter' === e.key) ||
      |         (e.keyCode &amp;&amp; 13 === e.keyCode)
      |     ) {
      |         // Do something with `Enter` key!
      |     }
      | });
    h3 editor.set(value)
    p Set value to the #[code &lt;textarea&gt;] element.
    h3 editor.source
    p Alias of #[code editor.self] property.
    h3 editor.state
    p Return the text editor states if any.
    h3 editor.trim(open = "", close = "", start = "", end = "", tidy = true)
    p Trim current selection from white-spaces, and optionally insert characters at the specified points.
    pre: code
      | // `a&lt;open&gt;#[mark &lt;start&gt;b&lt;end&gt;]&lt;close&gt;c`
      |
      | editor.trim(); // Remove any white-space(s) before and after selection, start and end of selection
      | editor.trim(false, false); // Remove any white-space(s) at the start and end of selection
      | editor.trim("", "", false, false); // Remove any white-space(s) before and after selection
      | editor.trim(' ', ' '); // Force a space before and after selection
      | editor.trim('\n\n', '\n\n'); // Force line-break before and after selection
      | editor.trim('\n\n', '\n\n', "", "", false); // Ignore empty value before and after selection, just insert that `\n\n` away
    h3 editor.value
    p Return the initial value of the #[code textarea] element.
    h3 editor.wrap(open, close, wrap = false)
    p Wrap current selection with #[var open] and #[var close].
    pre: code
      | editor.wrap('&lt;', '&gt;'); // Wrap with `&lt;` and `&gt;`
      | editor.wrap('&lt;', '&gt;', true); // Wrap with `&lt;` and `&gt;` then select
    h3 editor.$()
    p Get current text selection data.
    pre: code
      | // `a#[mark |b|]c`
      | console.log(editor.$()); // `{"start":1,"end":2,"value":"b","before":"a","after":"c","length":1}`
    h2 License
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ❤️
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman
