extends _index.pug

block state
  - const scripts = ['index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'));

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }

block content
  p(role='alert') Do you like this project? Please support my #[a(href='https://github.com/mecha-cms') Mecha CMS] project too. Thank you!
  header
    hgroup
      h1= title
      p Text Editor is a simple JavaScript application that aims to provide accessibility enhancements to the native HTML #[code &lt;textarea&gt;] elements, allowing users to control and manipulate their data in the text editor as they wish. It contains very sufficient methods to manipulate the existing text selection range data without providing unnecessary features. This keeps the file size small and the learning curve low, so you can fully focus on the results.
  main
    p
      textarea(spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      }) Lorem ipsum dolor sit amet.
    p(role='group')
      button(onclick='editor.wrap(\'<b>\', \'</b>\');'): b B
      = ' '
      button(onclick='editor.wrap(\'<i>\', \'</i>\');'): i I
      = ' '
      button(onclick='editor.insert(\'‚ù§\', -1, true);') &#10084;
    h2#usage
      a(href='#usage') #
      = ' Usage'
    h3 Browser
    pre: code
      | &lt;!DOCTYPE html&gt;
      | &lt;html dir="ltr"&gt;
      |   &lt;head&gt;
      |     &lt;meta charset="utf-8"&gt;
      |   &lt;/head&gt;
      |   &lt;body&gt;
      |     &lt;p&gt;
      |       &lt;textarea&gt;&lt;/textarea&gt;
      |     &lt;/p&gt;
      |     &lt;script src="#[a(href='index.min.js' target='_blank') ./index.min.js]"&gt;&lt;/script&gt;
      |     &lt;script&gt;
      |       const editor = new TextEditor(document.querySelector('textarea'));
      |     &lt;/script&gt;
      |   &lt;/body&gt;
      | &lt;/html&gt;
    h3 Node.js
    p Functions and methods in this application are mostly native JavaScript and are intended for use by the browser. Node.js doesn&rsquo;t know about the DOM, so this kind of practice will probably be used more often to build new browser packages than to be used directly in the Node.js server.
    h4 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      |
      | const editor = new TextEditor(document.querySelector('textarea'));
    h4 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      |
      | const editor = new TextEditor(document.querySelector('textarea'));
    h2#tests
      a(href='#tests') #
      = ' Tests'
    ul
      li: a(href='test.html' target='_blank') No Idea?
      li: a(href='test/$.html' target='_blank') Get Selection Data
      li: a(href='test/attach,detach.html' target='_blank') Attach, Detach
      li: a(href='test/blur,focus.html' target='_blank') Focus, Blur Events
      li: a(href='test/disabled.html' target='_blank') Disabled Text Area
      li: a(href='test/get,let,set.html' target='_blank') Set, Get and Let Value
      li: a(href='test/insert.html' target='_blank') Insert Selection
      li: a(href='test/match.html' target='_blank') Match Selection
      li: a(href='test/peel,wrap.html' target='_blank') Wrap, Peel Selection
      li: a(href='test/pull,push.html' target='_blank') Indent, Outdent Selection
      li: a(href='test/read-only.html' target='_blank') Read-Only Text Area
      li: a(href='test/replace.html' target='_blank') Replace Selection
      li: a(href='test/select.html' target='_blank') Set Selection Range
      li: a(href='test/self.html' target='_blank') Multiple Instances
      li: a(href='test/self.input.html' target='_blank') Using #[code &lt;input&gt;] Instead of #[code &lt;textarea&gt;]
      li: a(href='test/trim.html' target='_blank') Trim Selection
    h2#tweaks
      a(href='#tweaks') #
      = ' Tweaks'
    ul
      li: a(href='tweak/alter.html' target='_blank') Alter Selection
      li: a(href='tweak/alter.prompt.html' target='_blank') Alter Selection with Prompt Value
      li: a(href='tweak/paste.html' target='_blank') Paste as Plain Text
      li: a(href='tweak/pull,push.key.html' target='_blank') Indent, Outdent with Keyboard Key
      li: a(href='tweak/pull,push.type.html' target='_blank') Indent, Outdent by Custom Character
      li: a(href='tweak/replace,search.html' target='_blank') Search/Replace Functionality
      li: a(href='tweak/toggle.html' target='_blank') Toggle Replace Selection
    h2#constructor
      a(href='#constructor') #
      = ' Constructor'
    pre: code const editor = new TextEditor(self, tab = '\t');
    pre: code
      | const editor = new TextEditor(self, state = {
      |     tab: '\t',
      |     with: []
      | });
    h2#parameters
      a(href='#parameters') #
      = ' Parameters'
    h3: code self
    p The #[code &lt;textarea&gt;] element.
    h3: code tab
    p The default indent character for #[code editor.pull()] and #[code editor.push()] method.
    h3: code state
    p The configuration data.
    h3: code state.tab
    p The default indent character for #[code editor.pull()] and #[code editor.push()] method.
    h3: code state.with
    p List of callable functions or objects containing an #[code attach()] method to be invoked each time the application is initialized. A very simple ‚Äúplugin‚Äù system.
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    p Instance methods are methods available through the results of a #[code TextEditor] construct.
    h4: code editor.$()
    p Gets current text selection data.
    pre: code
      | // `a#[mark b]c`
      | console.log(editor.$()); // `{"after":"c","before":"a","end":2,"length":1,"start":1,"value":"b"}`
    h4: code editor.attach(self, state)
    p Re-initializes the application and its extensions after it has been detached.
    pre: code
      | editor.attach();
    h4: code editor.blur()
    p Blurs from the #[code &lt;textarea&gt;] element.
    h4: code editor.detach()
    p Disables the application methods (except for the #[code attach()] method) and executes the #[code detach()] method of the extensions, if they are present.
    pre: code
      | editor.detach();
    h4: code editor.fire(event, data, that)
    p Fires an event.
    pre: code
      | editor.fire('change', []);
    h4: code editor.focus(mode = 0)
    p Focuses to the #[code &lt;textarea&gt;] element.
    pre: code
      | editor.focus(); // Focus to the last selection
      | editor.focus(-1); // Focus to the start of text area value
      | editor.focus(+1); // Focus to the end of text area value
      | editor.focus(true); // Select all
    h4: code editor.get()
    p Gets current value of the #[code &lt;textarea&gt;] element if not empty, otherwise, return #[code null].
    h4: code editor.insert(value, mode = 0, clear = false)
    p Inserts #[var value] to (replace) the current selection.
    pre: code
      | editor.insert(':)'); // Insert at selection (replace selection)
      | editor.insert('&lt;b&gt;', -1); // Insert before selection
      | editor.insert('&lt;/b&gt;', +1); // Insert after selection
      | editor.insert(':)', -1, true); // Insert before selection and delete selection
      | editor.insert(':)', +1, true); // Insert after selection and delete selection
    h4: code editor.let()
    p Resets value to the initial value of the #[code &lt;textarea&gt;] element.
    h4: code editor.match(pattern, then)
    p Matches current selection with the pattern provided.
    pre: code
      | if (editor.match(/^\s*:\w+:\s*$/)) {
      |     alert('Selection is detected as emoji!');
      | }
    p Does something with the current matched selection.
    pre: code
      | let maps = {
      |     ':happy:': 'üòÄ',
      |     ':sad:': 'üò©',
      |     ':wonder:': 'üòï'
      | };
      |
      | editor.match(/^\s*:\w+:\s*$/, function (m) {
      |     let exists = maps[m[0] = m[0] ? m[0].trim() : ""];
      |     exists &amp;&amp; this.insert(exists);
      | });
    p Matches to the characters before selection, current selection and characters after selection.
    pre: code
      | let test = editor.match([/:$/, /^\w+$/, /^:/]);
      | console.log(test[0] &amp;&amp; test[1] &amp;&amp; test[2]);
    pre: code
      | editor.match([/:$/, /^\w+$/, /^:/], function (before, value, after) {
      |     console.log([before, value, after]);
      | });
    h4: code editor.off(event, then)
    p Removes an event.
    pre: code
      | editor.off('click'); // Remove all events from the `click` event container
      | editor.off('click', onClick); // Remove `onClick` event from the `click` event container
    h4: code editor.on(event, then)
    p Adds an event.
    pre: code
      | editor.on('click', function () {
      |     this.select(true); // Select all on click
      | });
    pre: code
      | function onClick() {
      |     this.select(true); // Select all on click
      | }
      |
      | editor.on('click', onClick);
    h4: code editor.peel(open, close, wrap = false)
    p Unwraps current selection from #[var open] and #[var close].
    pre: code
      | editor.peel('&lt;', '&gt;'); // Remove `&lt;` before selection and `&gt;` after selection
      | editor.peel('&lt;', '&gt;', true); // Remove `&lt;` at selection start and `&gt;` at selection end
    h4: code editor.pull(by = editor.state.tab, withEmptyLines = true)
    p Outdents current selection from #[var by].
    pre: code
      | editor.pull(); // Outdent from `\t`
      | editor.pull('****'); // Outdent from `****`
    h4: code editor.push(by = editor.state.tab, withEmptyLines = false)
    p Indents current selection with #[var by].
    pre: code
      | editor.push(); // Indent with `\t`
      | editor.push('****'); // Indent with `****`
    h4: code editor.replace(from, to, mode = 0)
    p Replaces current, before or after selection from #[var from] to #[var to].
    pre: code
      | editor.replace(/&lt;.*?&gt;/g, ""); // Strip HTML tag(s) in selection
      | editor.replace(/&lt;.*?&gt;/g, "", -1); // Strip HTML tag(s) before selection
      | editor.replace(/&lt;.*?&gt;/g, "", +1); // Strip HTML tag(s) after selection
    h4: code editor.select(...lot)
    p Sets selection range.
    pre: code
      | editor.select(); // Is the same as `editor.focus()`
      | editor.select(2); // Move caret to the index `2`
      | editor.select(0, 2); // Select from range `0` to `2`
      | editor.select(true); // Select all
    h4: code editor.set(value)
    p Sets value to the #[code &lt;textarea&gt;] element.
    h4: code editor.trim(open = "", close = "", start = "", end = "", tidy = true)
    p Trims current selection from white-spaces, and optionally insert characters at the specified points.
    pre: code
      | // `a&lt;open&gt;#[mark &lt;start&gt;b&lt;end&gt;]&lt;close&gt;c`
      |
      | editor.trim(); // Remove any white-space(s) before and after selection, start and end of selection
      | editor.trim(false, false); // Remove any white-space(s) at the start and end of selection
      | editor.trim("", "", false, false); // Remove any white-space(s) before and after selection
      | editor.trim(' ', ' '); // Force a space before and after selection
      | editor.trim('\n\n', '\n\n'); // Force line-break before and after selection
      | editor.trim('\n\n', '\n\n', "", "", false); // Ignore empty value before and after selection, just insert that `\n\n` away
    h4: code editor.wrap(open, close, wrap = false)
    p Wraps current selection with #[var open] and #[var close].
    pre: code
      | editor.wrap('&lt;', '&gt;'); // Wrap with `&lt;` and `&gt;`
      | editor.wrap('&lt;', '&gt;', true); // Wrap with `&lt;` and `&gt;` then select
    h3 Static Methods
    p Static methods are methods available directly on the #[code TextEditor] object.
    h4: code TextEditor.esc(value)
    p Escapes regular expression&rsquo;s special characters.
    h4: code TextEditor.from(self, state)
    p Creates a new #[code TextEditor] instance.
    pre: code
      | const editor = TextEditor.from(document.querySelector('textarea'));
    h4: code TextEditor.of(self)
    p Gets #[code TextEditor] instance of an element.
    pre: code
      | document.querySelectorAll('textarea').forEach(self => {
      |     const editor = TextEditor.of(self);
      | });
    h2#properties
     a(href='#properties') #
     = ' Properties'
    h3 Instance Properties
    p Instance properties are properties available through the results of a #[code TextEditor] construct.
    h4: code editor.hooks
    p Returns the events data.
    pre: code
      | console.log(editor.hooks);
    h4: code editor.self
    p Returns the #[code &lt;textarea&gt;] element.
    pre: code
      | editor.self.addEventListener('keydown', e =&gt; {
      |     if (
      |         (e.key &amp;&amp; 'Enter' === e.key) ||
      |         (e.keyCode &amp;&amp; 13 === e.keyCode)
      |     ) {
      |         // Do something with `Enter` key!
      |     }
      | });
    h4: code editor.state
    p Returns the application states if any.
    h4: code editor.value
    p Proxy that passes to the #[code editor.self.value] property.
    pre: code
      | console.log(editor.value); // Get text area value
    pre: code
      | editor.value = 'asdf'; // Set text area value
    h3 Static Properties
    p Static properties are properties available directly on the #[code TextEditor] object.
    h4: code TextEditor.state
    p Returns the default values of #[code editor.state].
    pre: code
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     foo: ['bar', 'baz', 'qux']
      | });
      |
      | console.log([TextEditor.state, editor.state]);
    h4: code TextEditor.version
    p Returns the application version.
    pre: code
      | let version = TextEditor.version,
      |     major = version.split('.')[0];
      |
      | if (+major &lt; 3) { &hellip; }
    h4: code TextEditor.x
    p List of regular expression characters to be escaped.
    h2#extensions
      a(href='#extensions') #
      = ' Extensions'
    h3 Anatomy of an Extension
    p Extension as a function:
    pre: code
      | function Extension(self, state = {}) {
      |     this.a = 1;
      |     this.b = function () {};
      |     return this;
      | }
      |
      | Object.defineProperty(Extension, 'name', {
      |     value: 'Extension'
      | });
    p Extension as an object:
    pre: code
      | const Extension = {
      |     attach: function (self, state = {}) {},
      |     detach: function (self, state = {}) {},
      |     name: 'Extension'
      | };
    h3 Usage of an Extension
    p As a core extension:
    pre: code
      | TextEditor.state.with.push(Extension);
    p As an optional extension:
    pre: code
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     with: [Extension]
      | });
    h3 List of Extensions
    ul
      li: a(href='../text-editor.history/index.html') History Feature
      li: a(href='../text-editor.key/index.html') Key(board) Feature
      li: a(href='../text-editor.rect/index.html') Rect Feature
      li: a(href='../text-editor.source/index.html') Generic Source Code Editor
      li: a(href='../text-editor.source-x-m-l/index.html') XML Source Code Editor
      li: a(href='../text-editor.source-h-t-m-l/index.html') HTML Source Code Editor
      li: a(href='../text-editor.source-markdown/index.html') Markdown Source Code Editor
      li: a(aria-disabled='true') BBCode Editor
      li: a(aria-disabled='true') HTML Editor
      li: a(aria-disabled='true') Markdown Editor
    h2#license
      a(href='#license') #
      = ' License'
    p Use it for free, pay if you get paid. So, you&rsquo;ve just benefited financially after using this project? It&rsquo;s a good idea to #[a(href='https://paypal.me/tatautaufik' target='_blank') share a little financial support] with this open source project too. Your support will motivate me to do any further development, as well as to provide voluntary support to overcome problems related to this project.
    p Thank you! ‚ù§Ô∏è
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman